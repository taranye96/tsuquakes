#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 21 15:40:52 2023

@author: tnye
"""

# Imports
import numpy as np
from obspy import read
from glob import glob
from mtspec import mtspec
import matplotlib.pyplot as plt
from matplotlib.ticker import LogLocator, MultipleLocator, ScalarFormatter, FormatStrFormatter
import signal_average_fns as avg

hf_stn_names = ['PPSI','LHSI','SBSI']
lf_stn_names = ['BSAT','SLBU','PKRT']
hf_hypdist = [82,381,545]
lf_hypdist = [52,82,161]

################################ Observed data ################################

all_disp_obs_files = sorted(glob(f'/Users/tnye/tsuquakes/data/waveforms/average/eucnorm_3comp/disp/*'))
all_acc_obs_files = sorted(glob(f'/Users/tnye/tsuquakes/data/waveforms/average/rotd50/acc/*'))
all_vel_obs_files = sorted(glob(f'/Users/tnye/tsuquakes/data/waveforms/average/rotd50/vel/*'))

disp_obs_files = np.array([all_disp_obs_files[0],all_disp_obs_files[5],all_disp_obs_files[2]])
acc_obs_files = np.array([all_acc_obs_files[7],all_acc_obs_files[2],all_acc_obs_files[8]])
vel_obs_files = np.array([all_vel_obs_files[7],all_vel_obs_files[2],all_vel_obs_files[8]])

obs_disp_amps = []
obs_acc_amps = []
obs_vel_amps = []
obs_hf_times = []
obs_lf_times = []

obs_disp_spec = []
obs_acc_spec = []
obs_vel_spec = []
obs_hf_freq = []
obs_lf_freq = []

for i in range(len(disp_obs_files)):
    obs_disp_amps.append(read(disp_obs_files[i])[0].data.tolist())
    obs_lf_times.append(read(disp_obs_files[i])[0].times('matplotlib').tolist())
    
    lf_delta = read(disp_obs_files[i])[0].stats.delta
    lf_samprate = read(disp_obs_files[i])[0].stats.sampling_rate
    lf_nyquist = 0.5 * lf_samprate
    lf_npts = read(disp_obs_files[i])[0].stats.npts
    
    disp_amp2, lf_freq =  mtspec(read(disp_obs_files[i])[0].data, delta=lf_delta, time_bandwidth=4, 
                              number_of_tapers=5, nfft=lf_npts, quadratic=True)
    disp_amp = np.sqrt(disp_amp2)
    
    obs_disp_spec.append(disp_amp)
    obs_lf_freq.append(lf_freq)

################################ Synthetic data ###############################

disp_syn_soft1 = sorted(glob('/Users/tnye/FakeQuakes/simulations/soft_velmod_test/soft1/processed_wfs/disp_noise/mentawai.000000/*'))
disp_syn_soft2 = sorted(glob('/Users/tnye/FakeQuakes/simulations/soft_velmod_test/soft2/processed_wfs/disp_noise/mentawai.000000/*'))
disp_syn_soft3 = sorted(glob('/Users/tnye/FakeQuakes/simulations/soft_velmod_test/soft3/processed_wfs/disp_noise/mentawai.000000/*'))
disp_syn_soft4 = sorted(glob('/Users/tnye/FakeQuakes/simulations/soft_velmod_test/soft4/processed_wfs/disp_noise/mentawai.000000/*'))

# Group all files by station
N = 3
disp_syn_soft1_grouped = [disp_syn_soft1[n:n+N] for n in range(0, len(disp_syn_soft1), N)]
disp_syn_soft2_grouped = [disp_syn_soft2[n:n+N] for n in range(0, len(disp_syn_soft2), N)]
disp_syn_soft3_grouped = [disp_syn_soft3[n:n+N] for n in range(0, len(disp_syn_soft3), N)]
disp_syn_soft4_grouped = [disp_syn_soft4[n:n+N] for n in range(0, len(disp_syn_soft4), N)]

disp_syn_files_soft1 = np.array([disp_syn_soft1_grouped[0],disp_syn_soft1_grouped[5],disp_syn_soft1_grouped[2]])
disp_syn_files_soft2 = np.array([disp_syn_soft2_grouped[0],disp_syn_soft2_grouped[5],disp_syn_soft2_grouped[2]])
disp_syn_files_soft3 = np.array([disp_syn_soft3_grouped[0],disp_syn_soft3_grouped[5],disp_syn_soft3_grouped[2]])
disp_syn_files_soft4 = np.array([disp_syn_soft4_grouped[0],disp_syn_soft4_grouped[5],disp_syn_soft4_grouped[2]])

syn_disp_soft1_spec = []
syn_disp_soft2_spec = []
syn_disp_soft3_spec = []
syn_disp_soft4_spec = []

syn_lf_freq = []

for i in range(len(disp_syn_files_soft1)):
    
    stE_disp_soft1 = read(disp_syn_files_soft1[i][0])
    stN_disp_soft1 = read(disp_syn_files_soft1[i][1])
    stZ_disp_soft1 = read(disp_syn_files_soft1[i][2])
    stE_disp_soft2 = read(disp_syn_files_soft2[i][0])
    stN_disp_soft2 = read(disp_syn_files_soft2[i][1])
    stZ_disp_soft2 = read(disp_syn_files_soft2[i][2])
    stE_disp_soft3 = read(disp_syn_files_soft3[i][0])
    stN_disp_soft3 = read(disp_syn_files_soft3[i][1])
    stZ_disp_soft3 = read(disp_syn_files_soft3[i][2])
    stE_disp_soft4 = read(disp_syn_files_soft4[i][0])
    stN_disp_soft4 = read(disp_syn_files_soft4[i][1])
    stZ_disp_soft4 = read(disp_syn_files_soft4[i][2])
    
    avg_disp_soft1 = avg.get_eucl_norm_3comp(stE_disp_soft1[0].data, stN_disp_soft1[0].data, stZ_disp_soft1[0].data)
    avg_disp_soft2 = avg.get_eucl_norm_3comp(stE_disp_soft2[0].data, stN_disp_soft2[0].data, stZ_disp_soft2[0].data)
    avg_disp_soft3 = avg.get_eucl_norm_3comp(stE_disp_soft3[0].data, stN_disp_soft3[0].data, stZ_disp_soft3[0].data)
    avg_disp_soft4 = avg.get_eucl_norm_3comp(stE_disp_soft4[0].data, stN_disp_soft4[0].data, stZ_disp_soft4[0].data)
    
    lf_delta = 0.5
    lf_samprate = 2
    lf_nyquist = 0.5 * lf_samprate
    lf_npts = read(disp_syn_files_soft1[i][0])[0].stats.npts
    
    disp_amp2, lf_freq =  mtspec(avg_disp_soft1, delta=lf_delta, time_bandwidth=4, 
                              number_of_tapers=5, nfft=lf_npts, quadratic=True)
    disp_amp = np.sqrt(disp_amp2)
    
    syn_disp_soft1_spec.append(disp_amp)
    syn_lf_freq.append(lf_freq)

    disp_amp2, lf_freq =  mtspec(avg_disp_soft2, delta=lf_delta, time_bandwidth=4, 
                              number_of_tapers=5, nfft=lf_npts, quadratic=True)
    disp_amp = np.sqrt(disp_amp2)
    
    syn_disp_soft2_spec.append(disp_amp)

    disp_amp2, lf_freq =  mtspec(avg_disp_soft3, delta=lf_delta, time_bandwidth=4, 
                              number_of_tapers=5, nfft=lf_npts, quadratic=True)
    disp_amp = np.sqrt(disp_amp2)
    
    syn_disp_soft3_spec.append(disp_amp)
    
    disp_amp2, lf_freq =  mtspec(avg_disp_soft4, delta=lf_delta, time_bandwidth=4, 
                              number_of_tapers=5, nfft=lf_npts, quadratic=True)
    disp_amp = np.sqrt(disp_amp2)
    
    syn_disp_soft4_spec.append(disp_amp)
    

#%%

fig, axs = plt.subplots(2,3,figsize=(6.5,5))
labels=[r'$\bf{(a)}$',r'$\bf{(b)}$',r'$\bf{(c)}$',r'$\bf{(d)}$',r'$\bf{(e)}$',r'$\bf{(f)}$']

j = 0

# Disp
for i in range(3):
    axs[0][i].loglog(syn_lf_freq[i],syn_disp_soft1_spec[i],alpha=0.7,lw=0.6,label='synthetic')
    axs[0][i].loglog(syn_lf_freq[i],syn_disp_soft2_spec[i],alpha=0.7,lw=0.6,label='synthetic')
    axs[0][i].loglog(syn_lf_freq[i],syn_disp_soft3_spec[i],alpha=0.7,lw=0.6,label='synthetic')
    axs[0][i].loglog(syn_lf_freq[i],syn_disp_soft4_spec[i],alpha=0.7,lw=0.6,label='synthetic')
    axs[0][i].loglog(obs_lf_freq[i],obs_disp_spec[i],c='k',alpha=0.7,lw=0.6,label='observed')
    axs[0][i].tick_params(axis='both', which='major', labelsize=10)
    axs[0][i].text(0.98,5E-2,f'Hypdist={int(lf_hypdist[i])}km',horizontalalignment='right',transform=axs[0][i].transAxes,size=10)
    axs[0][i].text(0.98,0.9,lf_stn_names[i],transform=axs[0][i].transAxes,size=10,horizontalalignment='right')
    axs[0][i].grid(alpha=0.25)
    axs[0][i].set_xlim(xmax=0.5)
    axs[0][i].text(-0.05,1.0,labels[j],transform=axs[0][i].transAxes,fontsize=10,va='top',ha='right')
    axs[0][i].set_ylim(2*10**-4,5)
    axs[0][i].tick_params(which='minor',bottom=False,left=False)
    if i !=0:
        axs[0][i].yaxis.set_tick_params(labelleft=False)
    if i == 1:
        axs[0][i].set_title(r'$\bf{Displacement}$',pad=10)
    j+=1

        
handles, labels = axs[0][0].get_legend_handles_labels()
axs[0][0].legend(loc='upper center', bbox_to_anchor=(0.5, -0.4),fancybox=False, shadow=False, ncol=2)
fig.supylabel(f'Amplitude',fontsize=11,x=0.01,y=0.575)
fig.supxlabel('Frequency (Hz)',fontsize=11,x=0.545,y=0.115,va='bottom')
plt.subplots_adjust(left=0.115, bottom=0.215, right=0.975, top=0.925, wspace=0.3, hspace=0.5)
