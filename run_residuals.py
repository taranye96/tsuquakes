#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug  8 18:46:37 2023

@author: tnye
"""


###############################################################################
# Script that calculates and plots residuals between synthetic and observed IMs
# and spectra
###############################################################################

# Imports
from glob import glob
import numpy as np
from numpy import genfromtxt
import pandas as pd
from os import path,makedirs,chdir
import residual_fns as res

parameter = 'final_suite_new_HF'
home_dir = f'/Users/tnye/FakeQuakes/simulations'

IM_files = sorted(glob(f'{home_dir}/{parameter}/*/flatfiles/IMs/*.csv'))

# stations = ['sm', 'gnss']
stations = ['sm']


# rise = []
# vrupt = []
# stress = []

# all_pgd_res = []
# all_pga_res = []
# all_pgv_res = []

for file in IM_files:
    
    project = file.split('/')[-4]
    # rise.append(float(project.split('_')[0][2:].strip('x')))
    # vrupt.append(float(project.split('_')[1][2:]))
    # stress.append(float(project.split('_')[2][2:]))
        
    # Project directory 
    project_dir = f'{home_dir}/{parameter}/{project}'
    
    # List of synthetic rupture scenarios generated by FakeQuakes 
    rupture_list = genfromtxt(f'{home_dir}/{parameter}/{project}/data/ruptures.list',dtype=str)
    
    gnss_run_list = []
    sm_run_list = []
    pgd_res_list = []
    pga_res_list = []
    pgv_res_list = []
    tPGD_res_ln_list = []
    tPGD_res_linear_list = []
    tPGA_res_ln_list = []
    tPGA_res_linear_list = []
    disp_spec_res_list = []
    acc_spec_res_list = []
    vel_spec_res_list = []
    
    # Loop through rupture scenarios
    for rupture in rupture_list:
        
        # Flatfile with observed data
        sm_obs_file = '/Users/tnye/tsuquakes/flatfiles/obs_IMs_sm.csv'
        gnss_obs_file = '/Users/tnye/tsuquakes/flatfiles/obs_IMs_gnss.csv'
        
        # Remove .rupt to obtain run name
        run = rupture.rsplit('.', 1)[0]
        
        # Calculate residuals
        if 'gnss' in stations:
            pgd_res, tPGD_res_ln, tPGD_res_linear, disp_spec_res = res.calc_res(gnss_obs_file,home_dir,parameter,project,run,'gnss')
            pgd_res_list.append(pgd_res.tolist())
            tPGD_res_ln_list.append(tPGD_res_ln.tolist())
            tPGD_res_linear_list.append(tPGD_res_linear.tolist())
            disp_spec_res_list.append(disp_spec_res.tolist())
            
            for i in range(len(pgd_res)):
                gnss_run_list.append(run)
            
        if 'sm' in stations:
            pga_res, pgv_res, tPGA_res_ln, tPGA_res_linear, acc_spec_res, vel_spec_res = res.calc_res(sm_obs_file,home_dir,parameter,project,run,'sm')
            pga_res_list.append(pga_res.tolist())
            pgv_res_list.append(pgv_res.tolist())
            tPGA_res_ln_list.append(tPGA_res_ln.tolist())
            tPGA_res_linear_list.append(tPGA_res_linear.tolist())
            acc_spec_res_list.append(acc_spec_res.tolist())
            vel_spec_res_list.append(vel_spec_res.tolist())
    
            # Append run to main run list
            for i in range(len(pga_res)):
                sm_run_list.append(run)

    # Function to flatten lists
    flatten = lambda l: [item for sublist in l for item in sublist]
    
    # Flatten residual lists
    pgd_res_list = flatten(pgd_res_list)
    pga_res_list = flatten(pga_res_list)
    pgv_res_list = flatten(pgv_res_list)
    tPGD_res_ln_list = flatten(tPGD_res_ln_list)
    tPGD_res_linear_list = flatten(tPGD_res_linear_list)
    tPGA_res_ln_list = flatten(tPGA_res_ln_list)
    tPGA_res_linear_list = flatten(tPGA_res_linear_list)
    disp_spec_res_list = flatten(disp_spec_res_list)
    acc_spec_res_list = flatten(acc_spec_res_list)
    vel_spec_res_list = flatten(vel_spec_res_list)
    
    # Make sure there is a folder for the residual flatfiles
    if not path.exists(f'{project_dir}/flatfiles/residuals'):
        makedirs(f'{project_dir}/flatfiles/residuals')
    
    # Set up dataframe
    if 'gnss' in stations:    
        gnss_IM_dict = {'run':gnss_run_list,'pgd_res':pgd_res_list,'tPGD_res_ln':tPGD_res_ln_list,
                        'tPGD_res_linear':tPGD_res_linear_list}
        gnss_spec_cols = ['Spectra_Disp_Res_Bin1', 'Spectra_Disp_Res_Bin2', 'Spectra_Disp_Res_Bin3', 'Spectra_Disp_Res_Bin4',
                      'Spectra_Disp_Res_Bin5', 'Spectra_Disp_Res_Bin6', 'Spectra_Disp_Res_Bin7',
                      'Spectra_Disp_Res_Bin8', 'Spectra_Disp_Res_Bin9', 'Spectra_Disp_Res_Bin10', 'Spectra_Disp_Res_Bin11',
                      'Spectra_Disp_Res_Bin12', 'Spectra_Disp_Res_Bin13', 'Spectra_Disp_Res_Bin14', 'Spectra_Disp_Res_Bin15',
                      'Spectra_Disp_Res_Bin16', 'Spectra_Disp_Res_Bin17', 'Spectra_Disp_Res_Bin18', 'Spectra_Disp_Res_Bin19',
                      'Spectra_Disp_Res_Bin20']
    
        gnss_obs_df = pd.read_csv(gnss_obs_file)
        
        main_gnss_df = gnss_obs_df.iloc[:,:16]
        main_gnss_df = main_gnss_df.reset_index(drop=True)
        
        gnss_IM_df = pd.DataFrame(data=gnss_IM_dict)
        
        gnss_spec_df = pd.DataFrame(disp_spec_res_list, columns=gnss_spec_cols)
        
        gnss_main_df_full = pd.concat([main_gnss_df]*len(rupture_list), ignore_index=True)
        
        gnss_res_df = pd.concat([gnss_main_df_full,gnss_IM_df,gnss_spec_df], axis=1)
        
        # Save to flatfile
        gnss_res_df.to_csv(f'{project_dir}/flatfiles/residuals/{project}_gnss.csv',index=False)
        
    if 'sm' in stations:    
        sm_IM_dict = {'run':sm_run_list,'pga_res':pga_res_list,'pgv_res':pgv_res_list,
                      'tPGA_res_ln':tPGA_res_ln_list,'tPGA_res_linear':tPGA_res_linear_list}

        acc_spec_cols = ['Spectra_Acc_Res_Bin1', 'Spectra_Acc_Res_Bin2', 'Spectra_Acc_Res_Bin3', 'Spectra_Acc_Res_Bin4',
                      'Spectra_Acc_Res_Bin5', 'Spectra_Acc_Res_Bin6', 'Spectra_Acc_Res_Bin7', 'Spectra_Acc_Res_Bin8',
                      'Spectra_Acc_Res_Bin9', 'Spectra_Acc_Res_Bin10', 'Spectra_Acc_Res_Bin11', 'Spectra_Acc_Res_Bin12',
                      'Spectra_Acc_Res_Bin13', 'Spectra_Acc_Res_Bin14', 'Spectra_Acc_Res_Bin15', 'Spectra_Acc_Res_Bin16',
                      'Spectra_Acc_Res_Bin17', 'Spectra_Acc_Res_Bin18', 'Spectra_Acc_Res_Bin19', 'Spectra_Acc_Res_Bin20']
        
        vel_spec_cols = ['Spectra_Vel_Res_Bin1', 'Spectra_Vel_Res_Bin2', 'Spectra_Vel_Res_Bin3', 'Spectra_Vel_Res_Bin4',
                      'Spectra_Vel_Res_Bin5', 'Spectra_Vel_Res_Bin6', 'Spectra_Vel_Res_Bin7', 'Spectra_Vel_Res_Bin8',
                      'Spectra_Vel_Res_Bin9', 'Spectra_Vel_Res_Bin10', 'Spectra_Vel_Res_Bin11', 'Spectra_Vel_Res_Bin12',
                      'Spectra_Vel_Res_Bin13', 'Spectra_Vel_Res_Bin14', 'Spectra_Vel_Res_Bin15', 'Spectra_Vel_Res_Bin16',
                      'Spectra_Vel_Res_Bin17', 'Spectra_Vel_Res_Bin18', 'Spectra_Vel_Res_Bin19', 'Spectra_Vel_Res_Bin20']
        
        sm_obs_df = pd.read_csv(sm_obs_file)
        
        main_sm_df = sm_obs_df.iloc[:,:16]
        main_sm_df = main_sm_df.reset_index(drop=True)
        
        sm_IM_df = pd.DataFrame(data=sm_IM_dict)
        
        acc_spec_df = pd.DataFrame(acc_spec_res_list, columns=acc_spec_cols)
        vel_spec_df = pd.DataFrame(vel_spec_res_list, columns=vel_spec_cols)
        
        sm_main_df_full = pd.concat([main_sm_df]*len(rupture_list), ignore_index=True)
        
        sm_res_df = pd.concat([sm_main_df_full,sm_IM_df,acc_spec_df,vel_spec_df], axis=1)
    
        # Save to flatfile
        sm_res_df.to_csv(f'{project_dir}/flatfiles/residuals/{project}_sm.csv',index=False)
    